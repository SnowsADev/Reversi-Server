// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReversiMvcApp.Data.Context;

namespace ReversiMvcApp.Data.Context.Migrations
{
    [DbContext(typeof(ReversiDbIdentityContext))]
    partial class ReversiDbIdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "44f80e14-9ca1-48db-b6cc-2a3153d01657",
                            ConcurrencyStamp = "2535d321-ed90-449b-9083-b4a90d24bc3f",
                            Name = "Mediator",
                            NormalizedName = "MEDIATOR"
                        },
                        new
                        {
                            Id = "512a1ac9-a17e-4602-a200-bf9e0ac10a6c",
                            ConcurrencyStamp = "07abf234-536c-4a93-898f-0b38587b837c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d4297ca9-77fe-496f-a148-7c7232811f85",
                            ConcurrencyStamp = "c4b8dcc6-c2d6-4ec3-b3df-88cbbb5214fd",
                            Name = "Speler",
                            NormalizedName = "SPELER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "60c35514-e6cf-47f4-84ad-8b010ce0b7b4",
                            RoleId = "512a1ac9-a17e-4602-a200-bf9e0ac10a6c"
                        },
                        new
                        {
                            UserId = "a5b07a52-c6e0-4dab-8a28-42c038e0cbb7",
                            RoleId = "44f80e14-9ca1-48db-b6cc-2a3153d01657"
                        },
                        new
                        {
                            UserId = "c7d9dd9f-99bc-422f-8f7f-0828c45acf68",
                            RoleId = "d4297ca9-77fe-496f-a148-7c7232811f85"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReversiMvcApp.Models.Spel", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AandeBeurt")
                        .HasColumnType("int");

                    b.Property<string>("Bord")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpelIsAfgelopen")
                        .HasColumnName("Afgelopen")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Spellen");
                });

            modelBuilder.Entity("ReversiMvcApp.Models.Speler", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AantalGelijk")
                        .HasColumnType("int");

                    b.Property<int>("AantalGewonnen")
                        .HasColumnType("int");

                    b.Property<int>("AantalVerloren")
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Kleur")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Spel")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpelID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Spel");

                    b.HasIndex("SpelID");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "60c35514-e6cf-47f4-84ad-8b010ce0b7b4",
                            AantalGelijk = 0,
                            AantalGewonnen = 0,
                            AantalVerloren = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb8fa02e-0ae1-4a88-80f9-ac04a6abd211",
                            Email = "admin@reversi.nl",
                            EmailConfirmed = true,
                            IsEnabled = true,
                            Kleur = 0,
                            LockoutEnabled = false,
                            Naam = "Admin Bram",
                            NormalizedEmail = "ADMIN@REVERSI.NL",
                            NormalizedUserName = "ADMIN@REVERSI.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKj18Pf5Qm42qZ6lknl71O3FPg7O/7E21XofCsDrxShUjnNHDuj7wwirRHHX8qwFww==",
                            PhoneNumber = "12345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd75956b-ae53-44ac-92a1-3bb7a2d5afe6",
                            TwoFactorEnabled = false,
                            UserName = "admin@reversi.nl"
                        },
                        new
                        {
                            Id = "a5b07a52-c6e0-4dab-8a28-42c038e0cbb7",
                            AantalGelijk = 0,
                            AantalGewonnen = 0,
                            AantalVerloren = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "607f68fd-c9f6-4a2a-96e6-acd6e8ba20e8",
                            Email = "mediator@reversi.nl",
                            EmailConfirmed = true,
                            IsEnabled = true,
                            Kleur = 0,
                            LockoutEnabled = false,
                            Naam = "Mediator Bram",
                            NormalizedEmail = "MEDIATOR@REVERSI.NL",
                            NormalizedUserName = "MEDIATOR@REVERSI.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOELcPa97IPKD08NZmijJGvoi4WOfC25++tSc1mVtkxYliy0vCk0zDg8gcOnr9yIOQ==",
                            PhoneNumber = "12345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8adb6479-5e67-444e-9f17-4e7b2b0307c1",
                            TwoFactorEnabled = false,
                            UserName = "mediator@reversi.nl"
                        },
                        new
                        {
                            Id = "c7d9dd9f-99bc-422f-8f7f-0828c45acf68",
                            AantalGelijk = 0,
                            AantalGewonnen = 0,
                            AantalVerloren = 0,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89b74710-7f15-4283-9eff-1f584ef60159",
                            Email = "speler@reversi.nl",
                            EmailConfirmed = true,
                            IsEnabled = true,
                            Kleur = 0,
                            LockoutEnabled = false,
                            Naam = "Bram",
                            NormalizedEmail = "SPELER@REVERSI.NL",
                            NormalizedUserName = "SPELER@REVERSI.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAELp2bJ2SJe+HUTmCKkgE4oPo14NEgSoapEORNqySmzhLpiD2LwV8+YAQKa7fWyiNYQ==",
                            PhoneNumber = "12345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09022a54-359a-4ad3-a4b3-bfee38639a34",
                            TwoFactorEnabled = false,
                            UserName = "speler@reversi.nl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReversiMvcApp.Models.Speler", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReversiMvcApp.Models.Speler", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReversiMvcApp.Models.Speler", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReversiMvcApp.Models.Speler", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReversiMvcApp.Models.Speler", b =>
                {
                    b.HasOne("ReversiMvcApp.Models.Spel", "ActueelSpel")
                        .WithMany()
                        .HasForeignKey("Spel");

                    b.HasOne("ReversiMvcApp.Models.Spel", null)
                        .WithMany("Spelers")
                        .HasForeignKey("SpelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
